import React, { useState } from 'react';

function TeachersPage() {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedDepartment, setSelectedDepartment] = useState('all');
  const [selectedTeacher, setSelectedTeacher] = useState(null);
  
  // –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–æ–æ–±—â–µ–Ω–∏–π
  const [showMessageModal, setShowMessageModal] = useState(false);
  const [messageTeacher, setMessageTeacher] = useState(null);
  const [messageData, setMessageData] = useState({
    subject: '',
    message: '',
    priority: 'normal',
    type: 'question',
    requestConsultation: false,
    consultationDate: '',
    consultationTime: '',
    attachments: []
  });
  const [sentMessages, setSentMessages] = useState([]);

  const teachers = [
    {
      id: 1,
      name: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
      title: '–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä',
      degree: '–î–æ–∫—Ç–æ—Ä —Ñ–∏–∑–∏–∫–æ-–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫',
      department: '–ö–∞—Ñ–µ–¥—Ä–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏',
      subjects: ['–í—ã—Å—à–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ I', '–í—ã—Å—à–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ II', '–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è'],
      email: 'ivanov@eduspace.edu',
      phone: '+7 (727) 111-11-11',
      office: '–ö–æ—Ä–ø—É—Å –ê, –∞—É–¥. 301',
      consultationHours: [
        { day: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', time: '14:00 - 16:00' },
        { day: '–°—Ä–µ–¥–∞', time: '10:00 - 12:00' }
      ],
      photo: 'üë®‚Äçüè´',
      experience: '25 –ª–µ—Ç',
      achievements: [
        '–õ–∞—É—Ä–µ–∞—Ç –ø—Ä–µ–º–∏–∏ "–õ—É—á—à–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≥–æ–¥–∞"',
        '–ê–≤—Ç–æ—Ä 50+ –Ω–∞—É—á–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π',
        '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å 15 –∫–∞–Ω–¥–∏–¥–∞—Ç—Å–∫–∏—Ö –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–π'
      ],
      courses: ['–í—ã—Å—à–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑', '–õ–∏–Ω–µ–π–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞'],
      rating: 4.8,
      reviewsCount: 156
    },
    {
      id: 2,
      name: '–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞',
      title: '–î–æ—Ü–µ–Ω—Ç',
      degree: '–ö–∞–Ω–¥–∏–¥–∞—Ç —Ñ–∏–∑–∏–∫–æ-–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫',
      department: '–ö–∞—Ñ–µ–¥—Ä–∞ —Ñ–∏–∑–∏–∫–∏',
      subjects: ['–§–∏–∑–∏–∫–∞ I', '–§–∏–∑–∏–∫–∞ II', '–§–∏–∑–∏–∫–∞ —Ç–≤–µ—Ä–¥–æ–≥–æ —Ç–µ–ª–∞'],
      email: 'petrova@eduspace.edu',
      phone: '+7 (727) 222-22-22',
      office: '–ö–æ—Ä–ø—É—Å –ë, –ª–∞–±. 205',
      consultationHours: [
        { day: '–í—Ç–æ—Ä–Ω–∏–∫', time: '15:00 - 17:00' },
        { day: '–ß–µ—Ç–≤–µ—Ä–≥', time: '11:00 - 13:00' }
      ],
      photo: 'üë©‚Äçüè´',
      experience: '12 –ª–µ—Ç',
      achievements: [
        '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∫–æ–Ω–∫—É—Ä—Å–∞ "–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ –≤ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏"',
        '–ê–≤—Ç–æ—Ä 20+ –Ω–∞—É—á–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π',
        '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç'
      ],
      courses: ['–û–±—â–∞—è —Ñ–∏–∑–∏–∫–∞', '–ö–≤–∞–Ω—Ç–æ–≤–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞', '–≠–ª–µ–∫—Ç—Ä–æ–¥–∏–Ω–∞–º–∏–∫–∞'],
      rating: 4.9,
      reviewsCount: 134
    },
    {
      id: 3,
      name: '–ê—Ö–º–µ—Ç–æ–≤ –ë–∞—É—Ä–∂–∞–Ω –ö–∞–π—Ä–∞—Ç–æ–≤–∏—á',
      title: '–î–æ—Ü–µ–Ω—Ç',
      degree: '–ö–∞–Ω–¥–∏–¥–∞—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫',
      department: '–ö–∞—Ñ–µ–¥—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π',
      subjects: ['–í–µ–±-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (React)', 'JavaScript', '–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'],
      email: 'akhmetov@eduspace.edu',
      phone: '+7 (727) 333-33-33',
      office: '–ö–æ—Ä–ø—É—Å IT, –∫–æ–º–ø. –∫–ª–∞—Å—Å 101',
      consultationHours: [
        { day: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', time: '16:00 - 18:00' },
        { day: '–ü—è—Ç–Ω–∏—Ü–∞', time: '14:00 - 16:00' }
      ],
      photo: 'üë®‚Äçüíª',
      experience: '8 –ª–µ—Ç',
      achievements: [
        '–°–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π React —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
        '–ú–µ–Ω—Ç–æ—Ä –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö IT –ø—Ä–æ–µ–∫—Ç–æ–≤',
        '–ê–≤—Ç–æ—Ä –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ YouTube –∫–∞–Ω–∞–ª–∞ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é'
      ],
      courses: ['React.js', 'Node.js', 'MongoDB', 'Full-Stack —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞'],
      rating: 4.7,
      reviewsCount: 189
    },
    {
      id: 4,
      name: '–°–∞—Ä—Å–µ–Ω–±–∞–µ–≤ –ö–∞–Ω–∞—Ç –ê—Å—ã–ª—Ö–∞–Ω–æ–≤–∏—á',
      title: '–î–æ—Ü–µ–Ω—Ç',
      degree: '–ö–∞–Ω–¥–∏–¥–∞—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫',
      department: '–ö–∞—Ñ–µ–¥—Ä–∞ –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã—Ö –Ω–∞—É–∫',
      subjects: ['–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞', '–ö—É–ª—å—Ç—É—Ä–æ–ª–æ–≥–∏—è', '–ü–æ–ª–∏—Ç–æ–ª–æ–≥–∏—è'],
      email: 'sarsenbayev@eduspace.edu',
      phone: '+7 (727) 444-44-44',
      office: '–ö–æ—Ä–ø—É—Å –ì, –∞—É–¥. 402',
      consultationHours: [
        { day: '–°—Ä–µ–¥–∞', time: '13:00 - 15:00' },
        { day: '–ß–µ—Ç–≤–µ—Ä–≥', time: '09:00 - 11:00' }
      ],
      photo: 'üë®‚Äçüéì',
      experience: '15 –ª–µ—Ç',
      achievements: [
        '–ê–≤—Ç–æ—Ä —É—á–µ–±–Ω–∏–∫–∞ "–ò—Å—Ç–æ—Ä–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞"',
        '–£—á–∞—Å—Ç–Ω–∏–∫ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –Ω–∞—É—á–Ω—ã—Ö –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π',
        '–≠–∫—Å–ø–µ—Ä—Ç –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ê–∑–∏–∏'
      ],
      courses: ['–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞', '–í—Å–µ–º–∏—Ä–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è', '–ö—Ä–∞–µ–≤–µ–¥–µ–Ω–∏–µ'],
      rating: 4.6,
      reviewsCount: 78
    },
    {
      id: 5,
      name: '–°–∏–¥–æ—Ä–æ–≤–∞ –ú–∞—Ä–∏—è –í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞',
      title: '–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä',
      degree: '–î–æ–∫—Ç–æ—Ä —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫',
      department: '–ö–∞—Ñ–µ–¥—Ä–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏',
      subjects: ['–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Ç–µ–æ—Ä–∏—è', '–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞', '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞'],
      email: 'sidorova@eduspace.edu',
      phone: '+7 (727) 555-55-55',
      office: '–ö–æ—Ä–ø—É—Å –≠, –∞—É–¥. 301',
      consultationHours: [
        { day: '–í—Ç–æ—Ä–Ω–∏–∫', time: '10:00 - 12:00' },
        { day: '–ß–µ—Ç–≤–µ—Ä–≥', time: '15:00 - 17:00' }
      ],
      photo: 'üë©‚Äçüíº',
      experience: '20 –ª–µ—Ç',
      achievements: [
        '–õ–∞—É—Ä–µ–∞—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—Ä–µ–º–∏–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è',
        '–ê–≤—Ç–æ—Ä 80+ –Ω–∞—É—á–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π',
        '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏ –†–ö'
      ],
      courses: ['–ú–∏–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞', '–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞', '–≠–∫–æ–Ω–æ–º–µ—Ç—Ä–∏–∫–∞'],
      rating: 4.8,
      reviewsCount: 203
    }
  ];

  const departments = [...new Set(teachers.map(teacher => teacher.department))];

  const filteredTeachers = teachers.filter(teacher => {
    const nameMatch = teacher.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                     teacher.subjects.some(subject => subject.toLowerCase().includes(searchTerm.toLowerCase()));
    const departmentMatch = selectedDepartment === 'all' || teacher.department === selectedDepartment;
    
    return nameMatch && departmentMatch;
  });

  const renderStars = (rating) => {
    const stars = [];
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 !== 0;
    
    for (let i = 0; i < fullStars; i++) {
      stars.push(<i key={i} className="bi bi-star-fill text-warning"></i>);
    }
    
    if (hasHalfStar) {
      stars.push(<i key="half" className="bi bi-star-half text-warning"></i>);
    }
    
    const emptyStars = 5 - Math.ceil(rating);
    for (let i = 0; i < emptyStars; i++) {
      stars.push(<i key={`empty-${i}`} className="bi bi-star text-warning"></i>);
    }
    
    return stars;
  };

  const handleContactTeacher = (teacher) => {
    setMessageTeacher(teacher);
    setShowMessageModal(true);
    // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
    setMessageData({
      subject: '',
      message: '',
      priority: 'normal',
      type: 'question',
      requestConsultation: false,
      consultationDate: '',
      consultationTime: '',
      attachments: []
    });
  };

  const handleSendMessage = () => {
    if (!messageData.subject.trim() || !messageData.message.trim()) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ–º—É –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
      return;
    }

    const newMessage = {
      id: Date.now(),
      teacher: messageTeacher,
      ...messageData,
      timestamp: new Date().toLocaleString('ru-RU'),
      status: 'sent',
      read: false
    };

    setSentMessages(prev => [...prev, newMessage]);
    setShowMessageModal(false);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
    showToast(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é ${messageTeacher.name}`, 'success');
  };

  const handleFileUpload = (event) => {
    const files = Array.from(event.target.files);
    const fileNames = files.map(file => file.name);
    setMessageData(prev => ({
      ...prev,
      attachments: [...prev.attachments, ...fileNames]
    }));
  };

  const removeAttachment = (index) => {
    setMessageData(prev => ({
      ...prev,
      attachments: prev.attachments.filter((_, i) => i !== index)
    }));
  };

  const showToast = (message, type = 'info') => {
    const toast = document.createElement('div');
    toast.className = `alert alert-${type} position-fixed`;
    toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px; animation: slideIn 0.3s ease;';
    toast.innerHTML = `
      <div class="d-flex align-items-center">
        <i class="bi bi-check-circle me-2"></i>
        ${message}
        <button type="button" class="btn-close ms-auto" onclick="this.parentElement.parentElement.remove()"></button>
      </div>
    `;
    document.body.appendChild(toast);
    
    setTimeout(() => {
      if (toast.parentNode) {
        toast.parentNode.removeChild(toast);
      }
    }, 5000);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
  const getAvailableTimeSlots = () => {
    if (!messageTeacher) return [];
    
    const slots = [];
    messageTeacher.consultationHours.forEach(consultation => {
      const [startTime, endTime] = consultation.time.split(' - ');
      const [startHour] = startTime.split(':');
      const [endHour] = endTime.split(':');
      
      for (let hour = parseInt(startHour); hour < parseInt(endHour); hour++) {
        slots.push(`${hour.toString().padStart(2, '0')}:00`);
        slots.push(`${hour.toString().padStart(2, '0')}:30`);
      }
    });
    
    return [...new Set(slots)].sort();
  };

  return (
    <div className="container py-4">
      <div className="page-content card">
        <div className="d-flex justify-content-between align-items-center mb-4">
          <div>
            <h2 className="mb-1">–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏</h2>
            <p className="lead text-muted mb-0">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π</p>
          </div>
                                <div className="d-flex align-items-center gap-3">
            {sentMessages.length > 0 && (
              <div className="d-flex align-items-center">
                <i className="bi bi-envelope-check text-success me-2"></i>
                <span className="badge bg-success">
                  {sentMessages.length} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                </span>
              </div>
            )}
            <div className="text-muted small">
              <i className="bi bi-people me-1"></i>
              {filteredTeachers.length} –∏–∑ {teachers.length} –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
            </div>
          </div>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="row mb-4">
          <div className="col-md-3">
            <div className="card text-center border-primary">
              <div className="card-body">
                <div className="h4 text-primary">{teachers.length}</div>
                <small className="text-muted">–í—Å–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π</small>
              </div>
            </div>
          </div>
          <div className="col-md-3">
            <div className="card text-center border-success">
              <div className="card-body">
                <div className="h4 text-success">{departments.length}</div>
                <small className="text-muted">–ö–∞—Ñ–µ–¥—Ä</small>
              </div>
            </div>
          </div>
          <div className="col-md-3">
            <div className="card text-center border-info">
              <div className="card-body">
                <div className="h4 text-info">
                  {teachers.filter(t => t.title === '–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä').length}
                </div>
                <small className="text-muted">–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä–æ–≤</small>
              </div>
            </div>
          </div>
          <div className="col-md-3">
            <div className="card text-center border-warning">
              <div className="card-body">
                <div className="h4 text-warning">
                  {(teachers.reduce((sum, t) => sum + t.rating, 0) / teachers.length).toFixed(1)}
                </div>
                <small className="text-muted">–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥</small>
              </div>
            </div>
          </div>
        </div>

        {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
        <div className="row mb-4">
          <div className="col-md-8">
            <label className="form-label">–ü–æ–∏—Å–∫:</label>
            <input
              type="text"
              className="form-control"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç—É..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          <div className="col-md-4">
            <label className="form-label">–ö–∞—Ñ–µ–¥—Ä–∞:</label>
            <select 
              className="form-select" 
              value={selectedDepartment} 
              onChange={(e) => setSelectedDepartment(e.target.value)}
            >
              <option value="all">–í—Å–µ –∫–∞—Ñ–µ–¥—Ä—ã</option>
              {departments.map(department => (
                <option key={department} value={department}>{department}</option>
              ))}
            </select>
          </div>
        </div>

        {/* –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π */}
        <div className="row">
          {filteredTeachers.map(teacher => (
            <div key={teacher.id} className="col-lg-6 mb-4">
              <div className="card h-100 shadow-sm">
                <div className="card-body">
                  <div className="d-flex align-items-start mb-3">
                    <div className="me-3" style={{ fontSize: '3rem' }}>
                      {teacher.photo}
                    </div>
                    <div className="flex-grow-1">
                      <h5 className="card-title mb-1">{teacher.name}</h5>
                      <p className="text-primary mb-1">{teacher.title}</p>
                      <small className="text-muted">{teacher.degree}</small>
                      <div className="mt-2">
                        <span className="badge bg-secondary">{teacher.department}</span>
                      </div>
                    </div>
                    <div className="text-end">
                      <div className="d-flex align-items-center mb-1">
                        {renderStars(teacher.rating)}
                      </div>
                      <small className="text-muted">
                        {teacher.rating} ({teacher.reviewsCount} –æ—Ç–∑—ã–≤–æ–≤)
                      </small>
                    </div>
                  </div>

                  <div className="mb-3">
                    <h6 className="mb-2">–ü—Ä–µ–ø–æ–¥–∞–≤–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:</h6>
                    <div>
                      {teacher.subjects.map((subject, index) => (
                        <span key={index} className="badge bg-light text-dark me-1 mb-1">
                          {subject}
                        </span>
                      ))}
                    </div>
                  </div>

                  <div className="mb-3">
                    <h6 className="mb-2">–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:</h6>
                    {teacher.consultationHours.map((consultation, index) => (
                      <div key={index} className="d-flex justify-content-between">
                        <span>{consultation.day}:</span>
                        <span className="fw-bold">{consultation.time}</span>
                      </div>
                    ))}
                  </div>

                  <div className="mb-3">
                    <div className="row">
                      <div className="col-6">
                        <small className="text-muted">–û–ø—ã—Ç:</small>
                        <div className="fw-bold">{teacher.experience}</div>
                      </div>
                      <div className="col-6">
                        <small className="text-muted">–ö–∞–±–∏–Ω–µ—Ç:</small>
                        <div className="fw-bold">{teacher.office}</div>
                      </div>
                    </div>
                  </div>

                  <div className="mb-3">
                    <small className="text-muted">–ö–æ–Ω—Ç–∞–∫—Ç—ã:</small>
                    <div>
                      <i className="bi bi-envelope me-1"></i>
                      <small>{teacher.email}</small>
                    </div>
                    <div>
                      <i className="bi bi-telephone me-1"></i>
                      <small>{teacher.phone}</small>
                    </div>
                  </div>

                  <div className="d-flex gap-2">
                    <button 
                      className="btn btn-outline-primary btn-sm flex-grow-1"
                      onClick={() => setSelectedTeacher(teacher)}
                    >
                      <i className="bi bi-info-circle me-1"></i>
                      –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                    </button>
                    <button 
                      className="btn btn-primary btn-sm"
                      onClick={() => handleContactTeacher(teacher)}
                    >
                      <i className="bi bi-chat-dots"></i>
                    </button>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>

        {filteredTeachers.length === 0 && (
          <div className="text-center py-5">
            <i className="bi bi-person-x display-1 text-muted"></i>
            <h4 className="mt-3 text-muted">–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h4>
            <p className="text-muted">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
          </div>
        )}

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
        {selectedTeacher && (
          <div className="modal show d-block" style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}>
            <div className="modal-dialog modal-lg">
              <div className="modal-content">
                <div className="modal-header">
                  <h5 className="modal-title">{selectedTeacher.name}</h5>
                  <button 
                    type="button" 
                    className="btn-close" 
                    onClick={() => setSelectedTeacher(null)}
                  ></button>
                </div>
                <div className="modal-body">
                  <div className="row">
                    <div className="col-md-3 text-center mb-3">
                      <div style={{ fontSize: '4rem' }}>{selectedTeacher.photo}</div>
                      <h6>{selectedTeacher.title}</h6>
                      <p className="text-muted">{selectedTeacher.degree}</p>
                      <div className="d-flex justify-content-center align-items-center">
                        {renderStars(selectedTeacher.rating)}
                        <span className="ms-2">{selectedTeacher.rating}</span>
                      </div>
                    </div>
                    <div className="col-md-9">
                      <div className="mb-4">
                        <h6>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</h6>
                        <ul>
                          {selectedTeacher.achievements.map((achievement, index) => (
                            <li key={index}>{achievement}</li>
                          ))}
                        </ul>
                      </div>

                      <div className="mb-4">
                        <h6>–ö—É—Ä—Å—ã:</h6>
                        <div>
                          {selectedTeacher.courses.map((course, index) => (
                            <span key={index} className="badge bg-primary me-1 mb-1">
                              {course}
                            </span>
                          ))}
                        </div>
                      </div>

                      <div className="row">
                        <div className="col-md-6">
                          <h6>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h6>
                          <p>
                            <i className="bi bi-envelope me-2"></i>
                            {selectedTeacher.email}
                          </p>
                          <p>
                            <i className="bi bi-telephone me-2"></i>
                            {selectedTeacher.phone}
                          </p>
                          <p>
                            <i className="bi bi-geo-alt me-2"></i>
                            {selectedTeacher.office}
                          </p>
                        </div>
                        <div className="col-md-6">
                          <h6>–ß–∞—Å—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:</h6>
                          {selectedTeacher.consultationHours.map((consultation, index) => (
                            <p key={index}>
                              <strong>{consultation.day}:</strong> {consultation.time}
                            </p>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div className="modal-footer">
                  <button 
                    type="button" 
                    className="btn btn-secondary" 
                    onClick={() => setSelectedTeacher(null)}
                  >
                    –ó–∞–∫—Ä—ã—Ç—å
                  </button>
                  <button 
                    type="button" 
                    className="btn btn-primary"
                    onClick={() => handleContactTeacher(selectedTeacher)}
                  >
                    <i className="bi bi-chat-dots me-2"></i>
                    –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è */}
        {showMessageModal && messageTeacher && (
          <div className="modal show d-block" style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}>
            <div className="modal-dialog modal-lg">
              <div className="modal-content">
                <div className="modal-header bg-primary text-white">
                  <h5 className="modal-title">
                    <i className="bi bi-chat-dots me-2"></i>
                    –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ - {messageTeacher.name}
                  </h5>
                  <button 
                    type="button" 
                    className="btn-close btn-close-white" 
                    onClick={() => setShowMessageModal(false)}
                  ></button>
                </div>
                <div className="modal-body">
                  <div className="row mb-3">
                    <div className="col-md-6">
                      <label className="form-label">–¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è *</label>
                      <select 
                        className="form-select" 
                        value={messageData.type}
                        onChange={(e) => setMessageData({...messageData, type: e.target.value})}
                      >
                        <option value="question">–í–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É</option>
                        <option value="consultation">–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</option>
                        <option value="assignment">–í–æ–ø—Ä–æ—Å –ø–æ –∑–∞–¥–∞–Ω–∏—é</option>
                        <option value="grade">–í–æ–ø—Ä–æ—Å –ø–æ –æ—Ü–µ–Ω–∫–µ</option>
                        <option value="schedule">–í–æ–ø—Ä–æ—Å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é</option>
                        <option value="other">–î—Ä—É–≥–æ–µ</option>
                      </select>
                    </div>
                    <div className="col-md-6">
                      <label className="form-label">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
                      <select 
                        className="form-select" 
                        value={messageData.priority}
                        onChange={(e) => setMessageData({...messageData, priority: e.target.value})}
                      >
                        <option value="low">–ù–∏–∑–∫–∏–π</option>
                        <option value="normal">–û–±—ã—á–Ω—ã–π</option>
                        <option value="high">–í—ã—Å–æ–∫–∏–π</option>
                        <option value="urgent">–°—Ä–æ—á–Ω—ã–π</option>
                      </select>
                    </div>
                  </div>

                  <div className="mb-3">
                    <label className="form-label">–¢–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è *</label>
                    <input
                      type="text"
                      className="form-control"
                      placeholder="–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è"
                      value={messageData.subject}
                      onChange={(e) => setMessageData({...messageData, subject: e.target.value})}
                    />
                  </div>

                  <div className="mb-3">
                    <label className="form-label">–°–æ–æ–±—â–µ–Ω–∏–µ *</label>
                    <textarea
                      className="form-control"
                      rows="5"
                      placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–ø—Ä–æ—Å..."
                      value={messageData.message}
                      onChange={(e) => setMessageData({...messageData, message: e.target.value})}
                    ></textarea>
                    <div className="form-text">
                      –°–∏–º–≤–æ–ª–æ–≤: {messageData.message.length} / 1000
                    </div>
                  </div>

                  <div className="mb-3">
                    <div className="form-check">
                      <input
                        className="form-check-input"
                        type="checkbox"
                        id="requestConsultation"
                        checked={messageData.requestConsultation}
                        onChange={(e) => setMessageData({...messageData, requestConsultation: e.target.checked})}
                      />
                      <label className="form-check-label" htmlFor="requestConsultation">
                        –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ª–∏—á–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
                      </label>
                    </div>
                  </div>

                  {messageData.requestConsultation && (
                    <div className="row mb-3">
                      <div className="col-md-6">
                        <label className="form-label">–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞</label>
                        <input
                          type="date"
                          className="form-control"
                          value={messageData.consultationDate}
                          onChange={(e) => setMessageData({...messageData, consultationDate: e.target.value})}
                          min={new Date().toISOString().split('T')[0]}
                        />
                      </div>
                      <div className="col-md-6">
                        <label className="form-label">–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è</label>
                        <select 
                          className="form-select"
                          value={messageData.consultationTime}
                          onChange={(e) => setMessageData({...messageData, consultationTime: e.target.value})}
                        >
                          <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è</option>
                          {getAvailableTimeSlots().map(slot => (
                            <option key={slot} value={slot}>{slot}</option>
                          ))}
                        </select>
                      </div>
                    </div>
                  )}

                  <div className="mb-3">
                    <label className="form-label">–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã</label>
                    <input
                      type="file"
                      className="form-control"
                      multiple
                      accept=".pdf,.doc,.docx,.txt,.jpg,.jpeg,.png"
                      onChange={handleFileUpload}
                    />
                    <div className="form-text">
                      –ú–∞–∫—Å–∏–º—É–º 5 —Ñ–∞–π–ª–æ–≤. –§–æ—Ä–º–∞—Ç—ã: PDF, DOC, DOCX, TXT, JPG, PNG
                    </div>
                    
                    {messageData.attachments.length > 0 && (
                      <div className="mt-2">
                        <small className="text-muted">–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</small>
                        {messageData.attachments.map((file, index) => (
                          <div key={index} className="d-flex align-items-center justify-content-between bg-light p-2 mt-1 rounded">
                            <div>
                              <i className="bi bi-file-earmark me-2"></i>
                              <span className="small">{file}</span>
                            </div>
                            <button 
                              className="btn btn-sm btn-outline-danger"
                              onClick={() => removeAttachment(index)}
                            >
                              <i className="bi bi-x"></i>
                            </button>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>

                  <div className="alert alert-info">
                    <i className="bi bi-info-circle me-2"></i>
                    <strong>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong> –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –æ–±—ã—á–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π. 
                    –î–ª—è —Å—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.
                  </div>
                </div>

                <div className="modal-footer">
                  <button 
                    type="button" 
                    className="btn btn-secondary" 
                    onClick={() => setShowMessageModal(false)}
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                  <button 
                    type="button" 
                    className="btn btn-primary"
                    onClick={handleSendMessage}
                    disabled={!messageData.subject.trim() || !messageData.message.trim()}
                  >
                    <i className="bi bi-send me-2"></i>
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default TeachersPage; 